#!/bin/bash
###############################################################################
##
##    Section: Abstract Interface:
##      Declate abstract interface for reporting commands like 'history' &
##     'top' that require aggregating output from one or more individual
##     commands to produce a consolidated report.
##
###############################################################################
##
###############################################################################
##
##  Purpose:
##    Identifies dlw attribute name of the desired GUID.  Essentially, two
##    types: 'ImageGUID' and a 'ContainerGUID'.
##
##  Inputs:
##    None
##    
##  Outputs:
##    When Successful:
##      SYSOUT - Name of dlw attrubute name.
##    When Failure: 
##      SYSERR - Displays informative error message.
##
###############################################################################
function VirtDockerReportingGUIDattribNameGet () {
  ScriptUnwind $LINENO "Please override: $FUNCNAME".
}
###############################################################################
##
##  Purpose:
##    Define common options and arguments accepted by reports
##    generated by aggregating multiple docker container commands.
##
###############################################################################
function VirtDockerCmmdOptionsArgsDef () {
  local -r commandName="`VirtDockerReportingCommandNameGet`"
  ComponentNmListArgument "$commandName" 'all'
  ComponentVersionArgument 'cur'
  ColumnHeadingRemove
  echo '--dlwcol single "ComponentName/COMPONENT/15,ContainerGUID/CONTAINER ID/12,=EXIST=none" "ColumnSelectExcludeVerify \<--dlwcol\>" required ""'
  echo '--dlwno-prereq single order=EXIST=true "ComponentNoPrereqVerify \<--dlwno-prereq\>" required ""'
  echo '--dlwign-state single false=EXIST=true "OptionsArgsBooleanVerify \<--dlwign-state\>" required ""'
return 0
}
###############################################################################
##
##  Purpose:
##    Describes purpose and arguments common options and arguments
##    accepted by reports generated by aggregating multiple docker
##    container commands.
##
###############################################################################
function VirtCmmdHelpDisplay () {
local -r commandName="`VirtDockerReportingCommandNameGet`"
ComponentNmListArgument "$commandName" 'all'

cat <<COMMAND_HELP_Purpose

Report on targeted Components' container(s) ports.  Wraps docker '$commandName' command.

Usage: dlw $commandName [OPTIONS] TARGET 

COMMAND_HELP_Purpose
  HelpCommandTarget
  HelpOptionHeading
  HelpComponentVersion 'cur'
  HelpComponentNoPrereq "$commandName" 'order'
  HelpIgnoreStateDocker 'false'
  HelpNoExecuteDocker 'false'
  HelpShowDocker 'false'
  HelpColumnSelectExclude 'ComponentName/COMPONENT/15,ContainerGUID/CONTAINER ID/12'
  HelpColumnHeadingRemove 'false'
  HelpHelpDisplay 'false'
  DockerOptionsFormat "$commandName"
}

##############################################################################
#function VirtDockerTargetGenerate () {
#  local -r optsArgListNm="$1"
#  local -r optsArgMapNm="$2"
#  local -r commandNm="$3"
#  local -r computePrereqs="$4"
#  local -r truncGUID="$5"
#  # Determine if state filtering should be applied.
#  local stateFilterApply
#  AssociativeMapAssignIndirect "$optsArgMapNm" '--dlwign-state' 'stateFilterApply'
#  if $stateFilterApply; then stateFilterApply='false'; else stateFilterApply='true'; fi
#  DockerTargetContainerGUIDGenerate  "$optsArgListNm" "$optsArgMapNm" "$commandNm" "$computePrereqs" "$truncGUID" 'false' "$stateFilterApply"
#}
##############################################################################

###############################################################################
##
##  Purpose:
##    Map Component names and  version scope to their associated 
##    Container GUID.
##
###############################################################################
#function VirtDockerTargetGenerate (){
#  local -r optsArgListNm="$1"
#  local -r optsArgMapNm="$2"
#  local -r commandNm="$3"
#  # Interpert ordering option to sequence Docker container commands so the
#  # command is more likely to succeed.
#  local dependGraph
#  local excludePrereq
#  NoPrereqSetting "`AssociativeMapAssignIndirect "$optsArgMapNm" '--dlwno-prereq'`" #"`VirtDockerContainerOrderingGet`" 'dependGraph' 'excludePrereq'
#  # Determine if state filtering should be applied.
#  local stateFilterApply
#  AssociativeMapAssignIndirect "$optsArgMapNm" '--dlwign-state' 'stateFilterApply'
#  if $stateFilterApply; then stateFilterApply='false'; else stateFilterApply='true'; fi 
#  if ! DockerTargetContainerGUIDGenerate "$1" "$2" "$3" "$dependGraph" 'true' "$excludePrereq" #"$stateFilterApply"; then
#    ScriptUnwind $LINENO "Failure while generating Container GUID targets"
#  fi
#}

function VirtContainerStateFilterApply () {
  local -r dockerStatus="$1"
  if [ "${dockerStatus:0:2}" == 'Up' ]; then
    return 0;
  fi
  return 1
}
###############################################################################
##
##  Purpose:
##    Define container command template.  Container commands typically accept
##    options followed by the container GUID.
##
###############################################################################
#function VirtDockerCmmdAssembleTemplate () {
#  echo '$PACKET_CONTAINER_GUID $DOCKER_CMMDLINE_OPTION' 
#  echo '$DOCKER_CMMDLINE_OPTION $PACKET_CONTAINER_GUID' 
#  return 0
#}
###############################################################################
#VirtDockerCmmdAssembleTemplateResolvePacketField () {
#  echo 'PACKET_CONTAINER_GUID ContainerGUID'
#  return 0
#}
###############################################################################
function VirtDockerCmmdExecutePacketForward () {
  echo 'true'
}
###############################################################################
##
##  Purpose:
##    Capture Docker reporting command output generated by multiple docker
##    commands and aggregrate it into a consolidated report.
##
##  Assumption:
##    Since bash variable names are passed to this routine, these names
##    cannot overlap the variable names locally declared within the
##    scope of this routine or its decendents.
##
##  Inputs:
##    $1 - Variable name to an array whose values contain the label names
##         of the options and agruments appearing on the command line in the
##         order specified by it.
##    $2 - Variable name to an associative array whose key is either the
##         option or argument label and whose value represents the value
##         associated to that label.
##    $3 - dlw command to execute. Maps 1 to 1 onto with Docker command line.
##    SYSIN - Output from the Execute command.
## 
##  Inputs:
##    SYSOUT - A filtered docker report displaying only the specified Components.
##             The report may also be augmented with additional column(s)
## 
###############################################################################
function VirtDockerCmmdProcessOutput () {
  local -r optsArgListNm="$1"
  local -r optsArgMapNm="$2"
  local -r commandNm="$3"
  local outputHeadingNot
  AssociativeMapAssignIndirect "$optsArgMapNm" '--dlwno-hdr' 'outputHeadingNot'
  local -A colmIncludeMap
  if ! ColmIncludeDetermine "`AssociativeMapAssignIndirect "$optsArgMapNm" '--dlwcol'`" 'colmIncludeMap'; then
    ScriptUnwind $LINENO "Problem with --dlwcol argument."
  fi
  if [ -n "${colmIncludeMap['none']}" ]; then
    # specifying 'none' as an attribute name omits all extended columns.
    unset colmIncludeMap
    local -A colmIncludeMap
  fi
  local GUIDvalue
  local GUIDattribName="`VirtDockerReportingGUIDattribNameGet`"
  local headingProcessed='false'
  local headingRemoved='false'
  local packetContainerMapPrior='false'
  local serializedColmBagArray
  local packet
  while read packet; do
    PipeScriptNotifyAbort "$packet"
    if PacketPreambleMatch "$packet"; then
      if $packetContainerMapPrior; then
        # Two container packets in a row, missing output for prior. Generate message
        echo "Missing output for: '$GUIDvalue' "
      fi
      packetContainerMapPrior='true'
      local -A GUIDvalueMap
      unset GUIDvalueMap
      local -A GUIDvalueMap
      PacketConvertToAssociativeMap "$packet" 'GUIDvalueMap'
      local GUIDvalue="${GUIDvalueMap["$GUIDattribName"]}"
      if [ -z "$GUIDvalue" ]; then echo "$packet"; fi # packet detected but not of desired type - forward it.
      # determine the columns to display for this entry and compute the complete
      # set of extended columns supported  by the report after visiting all packets.
      local -a colmBagArray
      unset colmBagArray
      local -a colmBagArray
      if ! ColumnAttributesDiscern 'colmIncludeMap' 'GUIDvalueMap' 'colmBagArray'; then 
        ScriptUnwind $LINENO "Problem while discerning report column attributes."
      fi
      local serializedColmBagArray="`typeset -p colmBagArray`"
      # State has been established for fields below
      # Potential heading exists before continue processing packets until first non-packet
      headingRemoved='false'
      continue
    fi
    # A completely empty report line.  Nothing to report on :: read next line.
    # Conforms to usual docker daemon  behavior to only generate docker header
    # without detail lines if there isn't reporting detail to display.
    if [ "$packet" == 'NULL_OUTPUT_GENERATED' ]; then
      packetContainerMapPrior='false'
      continue
    fi
    if ! $headingProcessed; then
      # first non-packet is output from docker reporting command.  Most likely a heading
      # if not omitted by, for example, the -q option.
      headingProcessed='true'
      local dockerHdrInd='false'
      if DockerHeadingSpecified "$packet"; then dockerHdrInd='true'; fi 
      if ! $outputHeadingNot; then
        #  user wants dlw column headings, but are there Docker headings
        if $dockerHdrInd; then
          if [ "${#colmIncludeMap[@]}" -gt 0 ]; then
            # packet contained Docker report heading :: prefix with extended attributes column headings.
            echo "`ExtendedHeadingsGenerate 'colmIncludeMap'` $packet"
          else
            # no extended columns in this report :: output Docker heading
            echo "$packet"
          fi
          continue
        elif [ "${#colmIncludeMap[@]}" -gt 0 ]; then
          # dlw heading requested, but most likely Docker report heading omitted.
          # packet probably contains detail row of report so let it be considered
          # below, however, generate dlw column headings.
          echo "`ExtendedHeadingsGenerate 'colmIncludeMap'`"
        fi
        # Docker heading detected but headings are suppressed 
        headingRemoved='true'
      fi
    fi
    if ! $headingRemoved; then
      headingRemoved='true'
      if DockerHeadingSpecified "$packet"; then
        continue
      fi
    fi
    # not a heading nor a dlw packet, most likely a reporting detail row.
    # extend report with requested columns.
    packetContainerMapPrior='false'
    if [ "${#colmIncludeMap[@]}" -gt 0 ] && [ -n "$serializedColmBagArray" ] ; then
      # extended columns are requested for the report
      local colmExendedBuf
      ExtendedColumnsGenerate 'colmIncludeMap' "$serializedColmBagArray" 'colmExendedBuf' 
      echo "${colmExendedBuf} ${packet}"
    else
      echo "${packet}"
    fi
  done
  return 0
}
##############################################################################
function VirtDockerReportingGUIDattribNameGet () {
  echo 'ContainerGUID'
  return 0
}
FunctionOverrideIncludeGet
